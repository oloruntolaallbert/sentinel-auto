{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f6cd5afb-0ed7-418f-8e80-3cd919ef1cc2')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f6cd5afb-0ed7-418f-8e80-3cd919ef1cc2')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "CLARA - MFA disabled for a user",
                "description": "Multi-Factor Authentication (MFA) helps prevent credential compromise.\nThis alert identifies when an attempt has been made to disable MFA for a user.\nIt will also filter out events where MFA has been re-enabled within a set timeframe.\nDisablementCounter column shows how many times a user has been disabled in the last 14 days.\nDisablements column shows all instances a User has been disabled.\n",
                "severity": "Medium",
                "enabled": true,
                "query": "// Set threshold (in minutes) for time difference between authentication being disabled and re-enabled.\nlet timeframe = 120;\n// look back period for the disablement history.\nlet lookBackPeriod = 14d;\n// Create safeline to protect the analytic from having issues\n// if no watchlist or watchlist has been deleted.\nlet safeline = datatable (SearchKey: string)[];\n// Merge safeline with watchlist via fuzzy union to prevent errors.\nlet watchlist = _GetWatchlist(\"ExclusionsList\") | project SearchKey | union isfuzzy=true safeline;\n// Save subquery for multiple usage.\nlet cache = materialize (\n    AuditLogs\n    | where TimeGenerated >= ago(lookBackPeriod)\n    | where OperationName == \"Disable Strong Authentication\"\n    | extend InitiatedBy = parse_json(InitiatedBy.user)\n    | evaluate bag_unpack(InitiatedBy)\n    | mv-expand TargetResources\n    | evaluate bag_unpack(TargetResources, \"Target\")\n    | extend TimeDisabled = TimeGenerated\n    | extend DisabledByUser = column_ifexists(\"userPrincipalName\", \"\")\n    | extend DisabledByIP = column_ifexists(\"ipAddress\", \"\")\n    | extend TargetUser = column_ifexists(\"TargetuserPrincipalName\", \"\")\n    | where DisabledByUser !in (watchlist)\n    | project TimeDisabled, DisabledByUser, DisabledByIP, TargetUser\n);\n// Counts how many times has the User been disabled in the past and makes a set of all instances.\nlet disableHistory =\n    cache\n    | summarize arg_max(TimeDisabled,*)\n        , AllDisablements = make_set(format_datetime(TimeDisabled, \"MM/dd/yyyy, hh:mm:ss.fff tt\"))\n        , DisablementCounter = countif(isnotempty(TargetUser)) \n        by TargetUser;\n// Joins the disablement counter - visible in the disabled rows.\nlet NewCache = \n    cache\n    | join kind=inner (disableHistory) on TargetUser\n    | project TimeDisabled, DisabledByUser, DisabledByIP, TargetUser, DisablementCounter, AllDisablements;\n// Handle each scenario separately and join by fuzzy union.\n(union isfuzzy=true\n// Identify when authentication has been disabled.\n(\nNewCache\n),\n// Identify when MFA disabled and then re-enabled outwith threshold time.\n(\nNewCache\n| join kind=inner (\n    AuditLogs\n    | where OperationName == \"Enable Strong Authentication\"\n    | extend InitiatedBy = parse_json(InitiatedBy.user)\n    | evaluate bag_unpack(InitiatedBy)\n    | mv-expand TargetResources\n    | evaluate bag_unpack(TargetResources, \"Target\")\n    | extend TimeEnabled = TimeGenerated\n    | extend EnabledByUser = column_ifexists(\"userPrincipalName\", \"\")\n    | extend EnabledByIP = column_ifexists(\"ipAddress\", \"\")\n    | extend TargetUser = column_ifexists(\"TargetuserPrincipalName\", \"\")\n    | project TimeEnabled, EnabledByUser, EnabledByIP, TargetUser\n) on TargetUser\n| extend TimeDiffMinutes = datetime_diff('minute', TimeEnabled, TimeDisabled)\n| where TimeDiffMinutes >= timeframe\n| project TimeDisabled, DisabledByUser, DisabledByIP, DisablementCounter, AllDisablements, TimeEnabled, EnabledByUser, EnabledByIP, TargetUser, TimeDiffMinutes\n),\n// Identify when MFA has been disabled in AWS.\n(\nAWSCloudTrail\n| where EventName in (\n    \"DeactivateMFADevice\", \n    \"DeleteVirtualMFADevice\"\n    )\n| extend RequestParameters = parse_json(RequestParameters)\n| evaluate bag_unpack(RequestParameters)\n| project \n    TimeDisabled = TimeGenerated, \n    DisabledByUser = UserIdentityArn,\n    AWSTarget = serialNumber\n),\n// Identify when MFA disabled/re-enabled in AWS outwith threshold time.\n(\nAWSCloudTrail\n| where EventName in (\n    \"DeactivateMFADevice\", \n    \"DeleteVirtualMFADevice\"\n    )\n| extend RequestParameters = parse_json(RequestParameters)\n| evaluate bag_unpack(RequestParameters)\n| project \n    TimeDisabled = TimeGenerated, \n    DisabledByUser = UserIdentityArn,\n    AWSTarget = serialNumber\n| join kind=inner (\n    AWSCloudTrail\n    | where EventName in (\n    \"EnableMFADevice\", \n    \"CreateVirtualMFADevice\"\n    )\n    | extend RequestParameters = parse_json(RequestParameters)\n    | evaluate bag_unpack(RequestParameters)\n    | project\n        TimeEnabled = TimeGenerated,\n        EnabledByUser = UserIdentityArn,\n        AWSTarget = serialNumber\n) on AWSTarget\n| extend TimeDiffMinutes = datetime_diff('minute', TimeEnabled, TimeDisabled)\n| where TimeDiffMinutes >= timeframe\n| project TimeDisabled, DisabledByUser, TimeEnabled, EnabledByUser, AWSTarget, TimeDiffMinutes\n)\n)\n",
                "queryFrequency": "PT2H",
                "queryPeriod": "PT2H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT4H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "CredentialAccess",
                    "Persistence"
                ],
                "techniques": [
                    "T1098"
                ],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT4H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": {},
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Mailbox",
                        "fieldMappings": [
                            {
                                "identifier": "MailboxPrimaryAddress",
                                "columnName": "DisabledByUser"
                            }
                        ]
                    },
                    {
                        "entityType": "Mailbox",
                        "fieldMappings": [
                            {
                                "identifier": "MailboxPrimaryAddress",
                                "columnName": "TargetUser"
                            }
                        ]
                    },
                    {
                        "entityType": "Mailbox",
                        "fieldMappings": [
                            {
                                "identifier": "MailboxPrimaryAddress",
                                "columnName": "EnabledByUser"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "DisabledByIP"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "EnabledByIP"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}