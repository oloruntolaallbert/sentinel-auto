{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "4001059139922242717"
    }
  },
  "parameters": {
    "customerName": {
      "type": "string",
      "metadata": {
        "description": "Customer name/identifier"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region"
      }
    },
    "deploymentTime": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd')]",
      "metadata": {
        "description": "Deployment timestamp"
      }
    }
  },
  "variables": {
    "workspaceName": "[format('{0}-sentinel-workspace', parameters('customerName'))]",
    "resourcePrefix": "[parameters('customerName')]",
    "retentionDays": 90,
    "workspaceSku": "PerGB2018",
    "enableAllOOTBRules": true,
    "defaultTags": {
      "Environment": "Production",
      "Project": "MSSP-Sentinel",
      "Customer": "[parameters('customerName')]",
      "ManagedBy": "MSSP",
      "DeploymentDate": "[parameters('deploymentTime')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('workspaceName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('defaultTags')]",
      "properties": {
        "sku": {
          "name": "[variables('workspaceSku')]"
        },
        "retentionInDays": "[variables('retentionDays')]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.OperationsManagement/solutions",
      "apiVersion": "2015-11-01-preview",
      "name": "[format('SecurityInsights({0})', variables('workspaceName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('defaultTags')]",
      "properties": {
        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      },
      "plan": {
        "name": "[format('SecurityInsights({0})', variables('workspaceName'))]",
        "publisher": "Microsoft",
        "product": "OMSGallery/SecurityInsights",
        "promotionCode": ""
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/onboardingStates",
      "apiVersion": "2021-03-01-preview",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('workspaceName'))]",
      "name": "[format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName'))]",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "[resourceId('Microsoft.OperationsManagement/solutions', format('SecurityInsights({0})', variables('workspaceName')))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
      "apiVersion": "2020-08-01",
      "name": "[format('{0}/{1}', variables('workspaceName'), 'AzureActivityLogs')]",
      "kind": "AzureActivityLog",
      "properties": {
        "linkedResourceId": "[format('/subscriptions/{0}/providers/microsoft.insights/eventtypes/management', subscription().subscriptionId)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "apiVersion": "2021-03-01-preview",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('workspaceName'))]",
      "name": "[format('{0}/Microsoft.SecurityInsights/AzureActiveDirectory', variables('workspaceName'))]",
      "kind": "AzureActiveDirectory",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "dataTypes": {
          "alerts": {
            "state": "enabled"
          },
          "signIns": {
            "state": "enabled"
          },
          "auditLogs": {
            "state": "enabled"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/onboardingStates', split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[2])]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "apiVersion": "2021-03-01-preview",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('workspaceName'))]",
      "name": "[format('{0}/Microsoft.SecurityInsights/MicrosoftThreatProtection', variables('workspaceName'))]",
      "kind": "MicrosoftThreatProtection",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "dataTypes": {
          "incidents": {
            "state": "enabled"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/onboardingStates', split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[2])]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "apiVersion": "2021-03-01-preview",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('workspaceName'))]",
      "name": "[format('{0}/Microsoft.SecurityInsights/AADIdentityProtection', variables('workspaceName'))]",
      "kind": "AzureActiveDirectoryIdentityProtection",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "dataTypes": {
          "alerts": {
            "state": "enabled"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/onboardingStates', split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[2])]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "apiVersion": "2021-03-01-preview",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('workspaceName'))]",
      "name": "[format('{0}/Microsoft.SecurityInsights/ThreatIntelligence', variables('workspaceName'))]",
      "kind": "ThreatIntelligence",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "dataTypes": {
          "indicators": {
            "state": "enabled"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/onboardingStates', split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[2])]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2021-09-01-preview",
      "name": "[format('{0}-SecurityEvents-DCR', variables('resourcePrefix'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('defaultTags')]",
      "properties": {
        "description": "MSSP Security Events Collection via AMA",
        "dataSources": {
          "windowsEventLogs": [
            {
              "name": "SecurityEvents",
              "streams": [
                "Microsoft-SecurityEvent"
              ],
              "xPathQueries": [
                "Security!*[System[(EventID=4624 or EventID=4625 or EventID=4648 or EventID=4688 or EventID=4720 or EventID=4726 or EventID=4776)]]"
              ]
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
              "name": "SecurityEventsLA"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": [
              "Microsoft-SecurityEvent"
            ],
            "destinations": [
              "SecurityEventsLA"
            ]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/dataCollectionRules",
      "apiVersion": "2021-09-01-preview",
      "name": "[format('{0}-Syslog-DCR', variables('resourcePrefix'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('defaultTags')]",
      "properties": {
        "description": "MSSP Syslog Collection via AMA",
        "dataSources": {
          "syslog": [
            {
              "name": "SyslogData",
              "streams": [
                "Microsoft-Syslog"
              ],
              "facilityNames": [
                "auth",
                "authpriv",
                "daemon",
                "kern",
                "syslog",
                "user"
              ],
              "logLevels": [
                "Warning",
                "Error",
                "Critical",
                "Alert",
                "Emergency"
              ]
            }
          ]
        },
        "destinations": {
          "logAnalytics": [
            {
              "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
              "name": "SyslogLA"
            }
          ]
        },
        "dataFlows": [
          {
            "streams": [
              "Microsoft-Syslog"
            ],
            "destinations": [
              "SyslogLA"
            ]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ]
    },
    {
      "condition": "[variables('enableAllOOTBRules')]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-deploy-ootb-rules', variables('resourcePrefix'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('defaultTags')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "azPowerShellVersion": "8.0",
        "timeout": "PT30M",
        "retentionInterval": "PT1H",
        "environmentVariables": [
          {
            "name": "WORKSPACE_NAME",
            "value": "[variables('workspaceName')]"
          },
          {
            "name": "RESOURCE_GROUP",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "SUBSCRIPTION_ID",
            "value": "[subscription().subscriptionId]"
          }
        ],
        "scriptContent": "      # Get all OOTB analytics rule templates and deploy them\n      Write-Host \"Starting OOTB Analytics Rules deployment...\"\n      \n      # Connect using managed identity\n      Connect-AzAccount -Identity\n      \n      $subscriptionId = $env:SUBSCRIPTION_ID\n      $resourceGroupName = $env:RESOURCE_GROUP\n      $workspaceName = $env:WORKSPACE_NAME\n      \n      # Set context\n      Set-AzContext -SubscriptionId $subscriptionId\n      \n      # Get access token for REST API calls\n      $context = Get-AzContext\n      $token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id, $null, $null, $null, $context.Environment.Endpoints.ResourceManager).AccessToken\n      \n      $headers = @{\n          'Authorization' = \"Bearer $token\"\n          'Content-Type' = 'application/json'\n      }\n      \n      # Get all alert rule templates\n      $templatesUri = \"$($context.Environment.Endpoints.ResourceManager)subscriptions/$subscriptionId/resourceGroups/$resourceGroupName/providers/Microsoft.OperationalInsights/workspaces/$workspaceName/providers/Microsoft.SecurityInsights/alertRuleTemplates?api-version=2021-10-01\"\n      \n      try {\n          $templatesResponse = Invoke-RestMethod -Uri $templatesUri -Headers $headers -Method Get\n          $templates = $templatesResponse.value\n          \n          Write-Host \"Found $($templates.Count) OOTB rule templates\"\n          \n          # MSSP Default Connectors for filtering\n          $msspConnectors = @(\n              \"AzureActivity\",\n              \"AzureActiveDirectory\", \n              \"SecurityEvents\",\n              \"Syslog\",\n              \"MicrosoftThreatProtection\",\n              \"AzureActiveDirectoryIdentityProtection\",\n              \"ThreatIntelligence\"\n          )\n          \n          $deployedCount = 0\n          \n          foreach ($template in $templates) {\n              # Only deploy Scheduled and NRT rules\n              if ($template.kind -eq \"Scheduled\" -or $template.kind -eq \"NRT\") {\n                  \n                  # Check if rule matches our connectors\n                  $shouldDeploy = $false\n                  if ($template.properties.requiredDataConnectors) {\n                      foreach ($connector in $template.properties.requiredDataConnectors) {\n                          if ($connector.connectorId -in $msspConnectors) {\n                              $shouldDeploy = $true\n                              break\n                          }\n                      }\n                  } else {\n                      # Deploy generic rules without specific connector requirements\n                      $shouldDeploy = $true\n                  }\n                  \n                  if ($shouldDeploy) {\n                      # Create analytics rule from template\n                      $ruleName = [System.Guid]::NewGuid().ToString()\n                      \n                      $ruleBody = @{\n                          kind = $template.kind\n                          properties = @{\n                              displayName = $template.properties.displayName\n                              description = $template.properties.description\n                              severity = $template.properties.severity\n                              enabled = $true\n                              query = $template.properties.query\n                              queryFrequency = $template.properties.queryFrequency\n                              queryPeriod = $template.properties.queryPeriod\n                              triggerOperator = $template.properties.triggerOperator\n                              triggerThreshold = $template.properties.triggerThreshold\n                              suppressionDuration = $template.properties.suppressionDuration\n                              suppressionEnabled = $template.properties.suppressionEnabled\n                              alertRuleTemplateName = $template.name\n                              templateVersion = $template.properties.version\n                          }\n                      }\n                      \n                      # Add optional properties if they exist\n                      if ($template.properties.entityMappings) {\n                          $ruleBody.properties.entityMappings = $template.properties.entityMappings\n                      }\n                      if ($template.properties.tactics) {\n                          $ruleBody.properties.tactics = $template.properties.tactics\n                      }\n                      if ($template.properties.techniques) {\n                          $ruleBody.properties.techniques = $template.properties.techniques\n                      }\n                      \n                      $createRuleUri = \"$($context.Environment.Endpoints.ResourceManager)subscriptions/$subscriptionId/resourceGroups/$resourceGroupName/providers/Microsoft.OperationalInsights/workspaces/$workspaceName/providers/Microsoft.SecurityInsights/alertRules/$ruleName\" + \"?api-version=2021-10-01\"\n                      \n                      try {\n                          $response = Invoke-RestMethod -Uri $createRuleUri -Headers $headers -Method Put -Body ($ruleBody | ConvertTo-Json -Depth 10)\n                          Write-Host \"✓ Deployed: $($template.properties.displayName)\"\n                          $deployedCount++\n                      } catch {\n                          Write-Host \"✗ Failed to deploy: $($template.properties.displayName) - $($_.Exception.Message)\"\n                      }\n                  }\n              }\n          }\n          \n          Write-Host \"Successfully deployed $deployedCount OOTB analytics rules\"\n          \n      } catch {\n          Write-Host \"Error getting templates: $($_.Exception.Message)\"\n          throw\n      }\n    "
      },
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/dataConnectors', split(format('{0}/Microsoft.SecurityInsights/AzureActiveDirectory', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/AzureActiveDirectory', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/AzureActiveDirectory', variables('workspaceName')), '/')[2])]",
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/dataConnectors', split(format('{0}/Microsoft.SecurityInsights/AADIdentityProtection', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/AADIdentityProtection', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/AADIdentityProtection', variables('workspaceName')), '/')[2])]",
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/dataConnectors', split(format('{0}/Microsoft.SecurityInsights/MicrosoftThreatProtection', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/MicrosoftThreatProtection', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/MicrosoftThreatProtection', variables('workspaceName')), '/')[2])]",
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/onboardingStates', split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/default', variables('workspaceName')), '/')[2])]",
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), 'Microsoft.OperationalInsights/workspaces/providers/dataConnectors', split(format('{0}/Microsoft.SecurityInsights/ThreatIntelligence', variables('workspaceName')), '/')[0], split(format('{0}/Microsoft.SecurityInsights/ThreatIntelligence', variables('workspaceName')), '/')[1], split(format('{0}/Microsoft.SecurityInsights/ThreatIntelligence', variables('workspaceName')), '/')[2])]"
      ]
    }
  ],
  "outputs": {
    "workspaceName": {
      "type": "string",
      "value": "[variables('workspaceName')]"
    },
    "workspaceId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), '2021-06-01').customerId]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "sentinelPortalUrl": {
      "type": "string",
      "value": "[format('https://portal.azure.com/#@{0}/blade/Microsoft_Azure_Security_Insights/MainMenuBlade/0/subscriptions/{1}/resourceGroups/{2}/providers/Microsoft.OperationalInsights/workspaces/{3}', subscription().tenantId, subscription().subscriptionId, resourceGroup().name, variables('workspaceName'))]"
    },
    "securityEventsDCR": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}-SecurityEvents-DCR', variables('resourcePrefix')))]"
    },
    "syslogDCR": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}-Syslog-DCR', variables('resourcePrefix')))]"
    },
    "deploymentSummary": {
      "type": "object",
      "value": {
        "customer": "[parameters('customerName')]",
        "workspace": "[variables('workspaceName')]",
        "location": "[parameters('location')]",
        "dataConnectors": 8,
        "analyticsRulesDeployed": "[variables('enableAllOOTBRules')]",
        "estimatedRulesCount": "200+",
        "deploymentComplete": true
      }
    }
  }
}